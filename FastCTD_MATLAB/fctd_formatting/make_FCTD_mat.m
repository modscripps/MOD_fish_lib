function [FCTD] =  make_FCTD_mat(matData,FCTDdir,base,cruise_specifics)

% Called by epsiProcess_convert_new_raw_to_mat when processing fctd files
% collected using ./fctd_epsi
%
% INPUTS:
%   matData - .mat file generated by epsi processing
%   FCTDdir - directory to store output files in FCTD format
%   base - name of .mat file without file suffix
%   cruise_specifics - optional input to specify certain things done on
%                      different cruises. 
%                      ('blt_2021','tfo_2023')
% 
% OUTPUT:
%   FCTD - structure formatted to use with San's FCTD gridding scripts
%
% -------------------------------------------------------------------------


use matData %Empty contents of matData structure

% Get CTD data
FCTD.time=ctd.dnum;
FCTD.pressure=ctd.P;
FCTD.temperature=ctd.T;
FCTD.conductivity=ctd.C;

% Get altimeter data
if ~isempty(alt) && isfield(alt,'time_s')
    try
    FCTD.altDist=interp1(alt.dnum,alt.dst,ctd.dnum);
    catch
        p = [];
    end
else
    FCTD.altTime=nan(length(ctd.dnum),1);
end

% Add VectorNav data
if ~isempty(vnav) && isfield(vnav,'time_s')
    diff_not_neg = [0;diff(vnav.dnum)]>0;
    keep = ~isnan(vnav.dnum) & ~isinf(vnav.dnum) & diff_not_neg;
    for ix=1:3
        FCTD.compass(:,ix)=interp1(vnav.dnum(keep),vnav.compass(keep,ix),ctd.dnum);
        FCTD.gyro(:,ix)=interp1(vnav.dnum(keep),vnav.gyro(keep,ix),ctd.dnum);
        FCTD.acceleration(:,ix)=interp1(vnav.dnum(keep),vnav.acceleration(keep,ix),ctd.dnum)./9.81;
    end
else
    FCTD.gyro=nan(length(ctd.dnum),3);
    FCTD.acceleration=nan(length(ctd.dnum),3);
    FCTD.compass=nan(length(ctd.dnum),3);
end

% Add GPS data
if ~isempty(gps) && isfield(gps,'dnum')
    % Sometimes there's a weirdness here with non-unique gps.dnum
    [~,iU] = unique(gps.dnum);
    if ~isempty(iU)
        FCTD.longitude=interp1(gps.dnum(iU),gps.longitude(iU),ctd.dnum);
        FCTD.latitude=interp1(gps.dnum(iU),gps.latitude(iU),ctd.dnum);
    else
        FCTD.longitude=nan(length(ctd.dnum),1);
        FCTD.latitude=nan(length(ctd.dnum),1);
    end
else
    FCTD.longitude=nan(length(ctd.dnum),1);
    FCTD.latitude=nan(length(ctd.dnum),1);
end

if ~isempty(fluor) && isfield(fluor,'time_s')
    diff_not_neg = [0; diff(fluor.dnum)]>0;
    keep = ~isnan(fluor.dnum) & ~isinf(fluor.dnum) & diff_not_neg;
    FCTD.bb(:,1)=interp1(fluor.dnum(keep),fluor.bb(keep,1),ctd.dnum);
    FCTD.chla(:,1)=interp1(fluor.dnum(keep),fluor.chla(keep,1),ctd.dnum);
    FCTD.fDOM(:,1)=interp1(fluor.dnum(keep),fluor.fDOM(keep,1),ctd.dnum);
else
    FCTD.bb=nan(length(ctd.dnum),1);
    FCTD.chla=nan(length(ctd.dnum),1);
    FCTD.fDOM=nan(length(ctd.dnum),1);
end


% Extra outputs for specific cruise setups
% if strcmp(cruise_specifics,'blt_2021');
if strcmp(cruise_specifics,'tfo_2024');
    % Microconductivity and Fluorometer
    %
    % On BLT 2021, microconductivity sensor was on shear
    % channel 2 of epsi and fluorometer was on shear channel 1. 
    % This step interpolates that data to
    % the same time array as the rest of the data, but since it
    % has a 20x faster sampling rate than the SBE (320 Hz vs 16
    % Hz), it actually becomes and N x 20 array - there are 20
    % uConductivity/fluorometer data points for every 1 SBE data point. We
    % also save time_fast as an N x 20 array.
    time_fast = linspace(ctd.dnum(1),ctd.dnum(end),length(ctd.dnum)*20);
    FCTD.time_fast = reshape(time_fast,20,[])';

    % Interpolate data that is not nan, not inf, and where time
    % is increasing
    diff_not_neg = [0;diff(epsi.dnum)]>0;
    keep = ~isnan(epsi.dnum) & ~isinf(epsi.dnum) & diff_not_neg;

    % if ~isempty(epsi) && isfield(epsi,'c1_count') && ~isempty(ctd)
    % ALB 20240901 new version- Now epsi will have a c1)count field for
    % uconductivity
    if ~isempty(epsi) && isfield(epsi,'c1_count') && ~isempty(ctd)
        % FCTD.uConductivity=reshape(interp1(epsi.dnum(keep),double(epsi.s2_count(keep)),time_fast),20,[])';
        FCTD.uConductivity=reshape(interp1(epsi.dnum(keep),double(epsi.c1_count(keep)),time_fast),20,[])';
    else
        FCTD.uConductivity=nan(length(ctd.dnum),20);
        disp(['No uConductivity data ' myASCIIfiles(i).name]);
    end

    % ALB 20240901 new version- Now epsi will have a f1_count field for
    % analog fluorometer
    if ~isempty(epsi) && isfield(epsi,'f1_volt')  && ~isempty(ctd)
        % FCTD.fluorometer=reshape(interp1(epsi.dnum(keep),epsi.s1_volt(keep),time_fast),20,[])';
        FCTD.fluorometer=reshape(interp1(epsi.dnum(keep),epsi.f1_volt(keep),time_fast),20,[])';
    else
        FCTD.fluorometer=nan(length(ctd.dnum),20);
        disp(['No fluorometer data ' myASCIIfiles(i).name]);
    end
end

if strcmp(cruise_specifics,'tfo_2023')
    % On TFO Seamounts in 2023, we had microconductivity on shear channel 2
    % and a tridente fluorometer on ???
    % This step interpolates that data to
    % the same time array as the rest of the data, but since it
    % has a 20x faster sampling rate than the SBE (320 Hz vs 16
    % Hz), it actually becomes and N x 20 array - there are 20
    % uConductivity/fluorometer data points for every 1 SBE data point. We
    % also save time_fast as an N x 20 array.
    time_fast = linspace(ctd.dnum(1),ctd.dnum(end),length(ctd.dnum)*20);
    FCTD.time_fast = reshape(time_fast,20,[])';

    % Interpolate data that is not nan, not inf, and where time
    % is increasing
    if ~isempty(epsi)
        diff_not_neg = [0;diff(epsi.dnum)]>0;
        [~,isunique] = unique(epsi.dnum);
        keep = ~isnan(epsi.dnum) & ~isinf(epsi.dnum) & diff_not_neg & isunique;
        
        if ~isempty(epsi) && isfield(epsi,'s2_count') && ~isempty(ctd)
            FCTD.uConductivity=reshape(interp1(epsi.dnum(keep),double(epsi.s2_count(keep)),time_fast),20,[])';
        else
            FCTD.uConductivity=nan(length(ctd.dnum),20);
            disp(['No uConductivity data ' myASCIIfiles(i).name]);
        end
    end
    
end

% Save FCTD mat files to the new FCTD mat directory FCTDmat
myFCTDMATfile = fullfile(FCTDdir,base);
save(myFCTDMATfile,'FCTD');
fprintf(1,'%s: Wrote  %s%s\n\n',datestr(now,'YY.mm.dd HH:MM:SS'), FCTDdir,myFCTDMATfile);

% Update FCTD .mat time index
FastCTD_UpdateMATFileTimeIndex(FCTDdir,base,FCTD);

end %end make_FCTD_mat
% ---------------------------------


function FastCTD_UpdateMATFileTimeIndex(dirname,filename,FCTD)
if exist([dirname '/FastCTD_MATfile_TimeIndex.mat'],'file')
    load([dirname '/FastCTD_MATfile_TimeIndex.mat']);
    ind = strncmp(filename,FastCTD_MATfile_TimeIndex.filenames,length(filename));
    if sum(ind) ~= 1
        FastCTD_MATfile_TimeIndex.filenames = [FastCTD_MATfile_TimeIndex.filenames; {filename}];
        FastCTD_MATfile_TimeIndex.timeStart = cat(1,FastCTD_MATfile_TimeIndex.timeStart,FCTD.time(1));
        FastCTD_MATfile_TimeIndex.timeEnd = cat(1,FastCTD_MATfile_TimeIndex.timeEnd,FCTD.time(end));
    else
        FastCTD_MATfile_TimeIndex.timeStart(ind) = FCTD.time(1);
        FastCTD_MATfile_TimeIndex.timeEnd(ind) = FCTD.time(end);
    end
else
    FastCTD_MATfile_TimeIndex.filenames = {filename};
    FastCTD_MATfile_TimeIndex.timeStart = FCTD.time(1);
    FastCTD_MATfile_TimeIndex.timeEnd = FCTD.time(end);
end
save([dirname '/FastCTD_MATfile_TimeIndex.mat'],'FastCTD_MATfile_TimeIndex');
end %end FastCTD_UpdateMATFileTimeIndex
% ------------------------------------